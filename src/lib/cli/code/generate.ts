import type { Schema } from '$lib/index.js';
import ora from 'ora';
import { prettifyAndSaveFile } from '../fs/prettify-and-save-file.js';
import { getFsPaths } from '../fs/get-fs-paths.js';
import { join } from 'node:path';
import type { Options } from '../types.js';
import { GENERATED_CODE_FILENAMES } from '../constants.js';
import { getModelTypeDeclarations } from './get-model-type-declarations.js';
export const generate = async (
  options: Options,
  schema: Schema
): Promise<void> => {
  const spinner = ora('Generating typescript code').start();
  const bannerComment = `
  /**
   * Generated by Frieda on ${new Date().toUTCString()}
   * Run \`frieda g\` to re-generate.
   */
  `;
  const typesTs = getTypesTsTypescript(options, schema, bannerComment);
  const schemaTs = getSchemaTsTypescript(schema, bannerComment);
  const typesPaths = getFsPaths(
    join(options.codeDirectory, GENERATED_CODE_FILENAMES.types)
  );
  const schemaPaths = getFsPaths(
    join(options.codeDirectory, GENERATED_CODE_FILENAMES.schema)
  );
  await prettifyAndSaveFile(typesPaths.relativePath, typesTs, 'ts');
  await prettifyAndSaveFile(schemaPaths.relativePath, schemaTs, 'ts');

  spinner.succeed();
};

export const getSchemaTsTypescript = (
  schema: Schema,
  bannerComment: string
): string => {
  return `
    ${bannerComment}
    export const schema = ${JSON.stringify(schema)};
  `;
};

export const getTypesTsTypescript = (
  options: Options,
  schema: Schema,
  bannerComment: string
): string => {
  return `
    ${bannerComment}
    import type { ModelDb } from '@nowzoo/frieda';
    ${(options.typeImports || []).join('\n')}

    ${Object.values(schema.tables)
      .map((t) => getModelTypeDeclarations(t, options))
      .join('\n\n')}
  `;
};

