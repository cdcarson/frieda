import type { ExtendedSchema } from '../parse/types.js';
import { getTypesTs } from './get-types-ts.js';
import { getSchemaTs } from './get-schema-ts.js';
import { getDatabaseTs } from './get-database-ts.js';
import { prettifyAndSaveFile } from '$lib/fs/prettify-and-save-file.js';
import type { ResolvedCliOptions } from '../cli/types.js';

import { join } from 'node:path';
import {
  GENERATED_FILE_EXTNAMES
} from './constants.js';
import { GENERATED_FILE_BASENAMES, type GenerateResult } from './types.js';
export const generateTypescript = async (
  options: ResolvedCliOptions,
  schema: ExtendedSchema
): Promise<GenerateResult> => {
  const bannerComment = `
  /**
   * Generated by Frieda on ${new Date().toUTCString()}
   * Run \`frieda g\` to re-generate.
   */
  `;
  const typesTs = getTypesTs(schema, bannerComment);
  const schemaTs = getSchemaTs(schema, bannerComment);
  const databaseTs = getDatabaseTs(schema, bannerComment);
  const result: GenerateResult = {
    database: await  prettifyAndSaveFile(
      join(
        options.outputDirectory,
        GENERATED_FILE_BASENAMES.database + GENERATED_FILE_EXTNAMES.ts
      ),
      databaseTs,
      'ts'
    ),
    schema: await prettifyAndSaveFile(
      join(
        options.outputDirectory,
        GENERATED_FILE_BASENAMES.schema + GENERATED_FILE_EXTNAMES.ts
      ),
      schemaTs,
      'ts'
    ),
    types: await prettifyAndSaveFile(
      join(
        options.outputDirectory,
        GENERATED_FILE_BASENAMES.types + GENERATED_FILE_EXTNAMES.ts
      ),
      typesTs,
      'ts'
    )
  }
  return result

};
